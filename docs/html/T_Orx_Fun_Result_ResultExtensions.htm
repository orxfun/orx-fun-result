<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>ResultExtensions Class</title><meta name="Title" content="ResultExtensions" /><meta name="Help.Id" content="T:Orx.Fun.Result.ResultExtensions" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.Fun.Result" /><meta name="guid" content="T_Orx_Fun_Result_ResultExtensions" /><meta name="Description" content="Extension methods for the result types and ." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/orxfun?tab=repositories"><img alt="orx" style="height: 50px;" src="../icons/orx-logo.png" /></a></div><div id="DocumentationTitle" class="level-item">Orx.Fun.Result (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Result<wbr />Extensions Class</h1><div class="summary">
            Extension methods for the result types <a href="T_Orx_Fun_Result_Res.htm">Res</a> and <a href="T_Orx_Fun_Result_Res_1.htm">Res<span id="LSTC54BE6B2_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>T<span id="LSTC54BE6B2_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a>.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="N_Orx_Fun_Result.htm">Orx.Fun.Result</a><br /><strong>Assembly:</strong> Orx.Fun.Result (in Orx.Fun.Result.dll) Version: 1.3.0+344c8bdd6f720ccfb2d8db7c61b76cf02be18f5f<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="identifier">ResultExtensions</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">ResultExtensions</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDIEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err.htm">Err(String)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res AddUser(User user)
{
    if (AlreadyExists(user))
        return Err($"user '{user.Id}' already exists.");
    if (HasAvailableCapacity(session))
        return Err("not enough capacity");
    else
    {
        // add user
        return Ok();
    }
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err_1.htm">Err(String, Exception)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">when</span>, <span class="parameter">exception</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res PutItem(Item item)
{
    try
    {
        PutItemToDatabase(item);
        return Ok();
    }
    catch (Exception e)
    {
        return Err(nameof(PutItem), e);
    }
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err_2.htm">Err(String, String)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>, <span class="parameter">when</span>.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err_3.htm">Err(String, String, Exception)</a></td><td>
            Creates a result as the Err variant; with the given error information: <span class="parameter">errorMessage</span>, <span class="parameter">when</span>, <span class="parameter">exception</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res PutItem(Item item)
{
    try
    {
        PutItemToDatabase(item);
        return Ok();
    }
    catch (Exception e)
    {
        return Err("failed to execute sql command.", nameof(PutItem), e);
    }
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err__1.htm">Err<span id="LSTC54BE6B2_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Err with the given <span class="parameter">errorMessage</span>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;double&gt; Divide(double number, double divider)
{
    if (divider == 0)
        return Err&lt;double&gt;("Cannot divide to zero");
    else
        return Ok(number / divider);
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Err__1_1.htm">Err<span id="LSTC54BE6B2_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(String, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Err with the given <span class="parameter">errorMessage</span> which is observed during <span class="parameter">when</span>.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Flatten.htm">Flatten(Res<span id="LSTC54BE6B2_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Flattens the result of result; i.e., Res&lt;Res&gt; -&gt; Res, by mapping:
            <ul><li>Err =&gt; Err,</li><li>Ok(Err) =&gt; Err,</li><li>Ok(Ok) =&gt; Ok.</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;Res&gt; nestedResult = Err&lt;Res&gt;("msg");
Res result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&gt; nestedResult = Ok(Err("msg"));
Res result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&gt; nestedResult = Ok(Ok());
Res result = nestedResult.Flatten();
Assert(result.IsOk);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Flatten__1.htm">Flatten<span id="LSTC54BE6B2_8" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Res<span id="LSTC54BE6B2_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Flattens the result of result of <span class="parameter">T</span>; i.e., Res&lt;Res&lt;T&gt;&gt; -&gt; Res&lt;T&gt;, by mapping:
            <ul><li>Err =&gt; Err,</li><li>Ok(Err) =&gt; Err,</li><li>Ok(Ok(value)) =&gt; Ok(value).</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;Res&lt;int&gt;&gt; nestedResult = Err&lt;Res&lt;int&gt;&gt;("msg");
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&lt;int&gt;&gt; nestedResult = Ok(Err&lt;int&gt;("msg"));
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsErr and result.ErrorMessage() == Some("msg"));

Res&lt;Res&lt;int&gt;&gt; nestedResult = Ok(Ok(42));
Res&lt;int&gt; result = nestedResult.Flatten();
Assert(result.IsOk and result.Unwrap() == 42);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_IntoRes__1.htm">IntoRes<span id="LSTC54BE6B2_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Opt<span id="LSTC54BE6B2_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_17" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Shorthand for mapping options to results as follows:
            <ul><li>None&lt;T&gt; =&gt; Err&lt;T&gt; with a generic error message;</li><li>Some(T) =&gt; Ok(T).</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_IntoRes__1_1.htm">IntoRes<span id="LSTC54BE6B2_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Opt<span id="LSTC54BE6B2_20" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Shorthand for mapping options to results as follows:
            <ul><li>None&lt;T&gt; =&gt; Err&lt;T&gt; with the given error message;</li><li>Some(T) =&gt; Ok(T).</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Map__3_1.htm">Map<span id="LSTC54BE6B2_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2, TOut<span id="LSTC54BE6B2_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Res<span id="LSTC54BE6B2_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>ValueTuple<span id="LSTC54BE6B2_25" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2<span id="LSTC54BE6B2_26" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2, TOut<span id="LSTC54BE6B2_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Allows a result of a tuple (t1, t2) to map with a function taking two arguments t1 and t2.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int Add(int a, int b) =&gt; a + b;

var numbers = Ok((1, 2));
var sum = numbers.Map(Add);
Assert(sum == Some(3));</code></pre></div></div>
            
            This is mostly useful in enabling function composition.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Map__3.htm">Map<span id="LSTC54BE6B2_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2, TOut<span id="LSTC54BE6B2_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Res<span id="LSTC54BE6B2_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>ValueTuple<span id="LSTC54BE6B2_33" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2<span id="LSTC54BE6B2_34" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T1, T2, Task<span id="LSTC54BE6B2_37" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTC54BE6B2_38" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) Allows a result of a tuple (t1, t2) to map with a function taking two arguments t1 and t2.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static int Add(int a, int b) =&gt; a + b;

var numbers = Ok((1, 2));
var sum = numbers.Map(Add);
Assert(sum == Some(3));</code></pre></div></div>
            
            This is mostly useful in enabling function composition.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_MapReduce__1.htm">MapReduce<span id="LSTC54BE6B2_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Res<span id="LSTC54BE6B2_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Applies the result mapper to the collection and reduces it to a single result:
            <ul><li>returns Ok when all results are Ok;</li><li>Ok if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_MapReduce__2.htm">MapReduce<span id="LSTC54BE6B2_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LSTC54BE6B2_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_48" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_49" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_50" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Res<span id="LSTC54BE6B2_51" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTC54BE6B2_52" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_53" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Applies the result mapper to the collection and reduces it to a single result:
            <ul><li>returns Ok(List&lt;T&gt;) when all results are Ok;</li><li>Ok(empty list of T) if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_MapReduceAsync__1.htm">MapReduceAsync<span id="LSTC54BE6B2_54" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_55" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_56" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_57" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_58" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Task<span id="LSTC54BE6B2_59" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_60" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_61" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Applies the result mapper to the collection and reduces it to a single result:
            <ul><li>returns Ok when all results are Ok;</li><li>Ok if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_MapReduceAsync__2.htm">MapReduceAsync<span id="LSTC54BE6B2_62" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, TOut<span id="LSTC54BE6B2_63" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_64" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_65" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTC54BE6B2_66" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T, Task<span id="LSTC54BE6B2_67" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_68" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTC54BE6B2_69" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_70" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_71" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Applies the result mapper to the collection and reduces it to a single result:
            <ul><li>returns Ok(List&lt;T&gt;) when all results are Ok;</li><li>Ok(empty list of T) if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Ok.htm">Ok<span id="LSTC54BE6B2_72" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Creates a result as the Ok variant.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = Ok();
Assert(result.IsOk);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Ok__1.htm">Ok<span id="LSTC54BE6B2_73" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_74" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(T)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;double&gt; number = Ok(42.5);
Assert(number.IsOk and number.Unwrap() == 42.5);

// on the other hand:
string name = null;
Res&lt;string&gt; optName = Ok(name);
Assert(optName.IsErr);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_OkIf.htm">OkIf(Boolean, String)</a></td><td>
            Creates a result as Ok variant if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateInput(Form form)
{
    return OkIf(!form.HasEmptyFields())
        .OkIf(form.Date &lt;= DateTime.Now)
        // chained validation calls
        .OkIf(repo.AlreadyContains(form.Id));
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_OkIf__1_1.htm">OkIf<span id="LSTC54BE6B2_75" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_76" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, T, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">value</span> if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Shape shape = GetShape(); // valid only if shape has a positive base area.
Res&lt;Shape&gt; resultShape = OkIf(shape.GetBaseArea() &gt; 0, shape);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_OkIf__1.htm">OkIf<span id="LSTC54BE6B2_77" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_78" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Boolean, Func<span id="LSTC54BE6B2_79" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_80" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with value <span class="parameter">lazyGetValue</span>() if the <span class="parameter">okCondition</span> holds.
            Otherwise, it will map into an Err.
            Note that the <span class="parameter">lazyGetValue</span> is only evaluated if the <span class="parameter">okCondition</span> holds.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser();
// create a database connection (expensive) only if the user IsOk.
Res&lt;Conn&gt; conn = OkIf(user.IsOk, () =&gt; CreateDatabaseConnection());</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_OkIfNotnull__1.htm">OkIfNotnull<span id="LSTC54BE6B2_81" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_82" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Creates a result of <span class="parameter">T</span> as Ok variant with the given <span class="parameter">value</span>.
            However, if the <span class="parameter">value</span> is null, it will map into Err.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">string name = null;
static string? GetName(int id)
    =&gt; id == 0 ? "Mr Crabs" : null;
Res&lt;string&gt; resName = GetName(0).OkIfNotnull();
Assert.Equal(Ok("Mr Crabs"), resName);

resName = GetName(42).OkIfNotnull();
Assert.True(resName.IsErr);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Reduce.htm">Reduce(IEnumerable<span id="LSTC54BE6B2_83" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_84" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Reduces the collection of results to a single result:
            <ul><li>returns Ok when all results are Ok;</li><li>Ok if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_Reduce__1.htm">Reduce<span id="LSTC54BE6B2_85" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_86" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_87" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_88" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_89" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_90" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Reduces the collection of results to result of list of values:
            <ul><li>returns Ok(List&lt;T&gt;) when all results are Ok;</li><li>Ok(empty list of T) if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_ReduceAsync.htm">ReduceAsync(IEnumerable<span id="LSTC54BE6B2_91" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTC54BE6B2_92" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_93" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_94" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Reduces the collection of results to a single result:
            <ul><li>returns Ok when all results are Ok;</li><li>Ok if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_ResultExtensions_ReduceAsync__1.htm">ReduceAsync<span id="LSTC54BE6B2_95" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_96" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(IEnumerable<span id="LSTC54BE6B2_97" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTC54BE6B2_98" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTC54BE6B2_99" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>T<span id="LSTC54BE6B2_100" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_101" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTC54BE6B2_102" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Reduces the collection of results to result of list of values:
            <ul><li>returns Ok(List&lt;T&gt;) when all results are Ok;</li><li>Ok(empty list of T) if the collection is empty;</li><li>the first Err otherwise.</li></ul></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="N_Orx_Fun_Result.htm">Orx.Fun.Result Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-fun-result<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.Fun.Result%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>