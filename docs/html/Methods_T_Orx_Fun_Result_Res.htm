<!DOCTYPE html []><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Res Methods</title><meta name="Title" content="Methods" /><meta name="Help.Id" content="Methods.T:Orx.Fun.Result.Res" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.Fun.Result" /><meta name="guid" content="Methods_T_Orx_Fun_Result_Res" /><meta name="tocFile" content="../toc/IDBA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/orxfun?tab=repositories"><img alt="orx" style="height: 50px;" src="../icons/orx-logo.png" /></a></div><div id="DocumentationTitle" class="level-item">Orx.Fun.Result (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Res Methods</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDADASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="M_Orx_Fun_Result_Res_Do.htm">Do</a></td><td>
            Runs <span class="parameter">action</span>() only if IsOk; and returns itself back.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">User user = CreateUser(/*inputs*/);
Res result = TryPutUserToDb(user).Do(Log.Success("user created"));
// result will be:
// - Ok if TryPutUserToDb succeeds and returns Ok; in this case the success message will be logged; or
// - Err if TryPutUserToDb returns Err; and the success message log will not be called.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_DoIfErr.htm">DoIfErr(Action)</a></td><td>
            Runs <span class="parameter">action</span>() only if IsErr; and returns itself back.
            This is the counterpart of the <a href="M_Orx_Fun_Result_Res_Do.htm">Do(Action)</a> method.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = RefreshIndices(/*inputs*/).DoIfErr(() =&gt; Alert("database connection failed"));
// result will be:
// - Ok if refreshing db indices succeeded;
// - Err if it failed, in which case the Alert call will be made.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_DoIfErr_1.htm">DoIfErr(Action<span id="LSTAEACDB6F_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String<span id="LSTAEACDB6F_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Runs <span class="parameter">action</span>(error-message) only if IsErr; and returns itself back.
            This is the counterpart of the <a href="M_Orx_Fun_Result_Res_Do.htm">Do(Action)</a> method.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res result = RefreshIndices(/*inputs*/).DoIfErr(err =&gt;  Alert($"database connection failed: {err}"));
// result will be:
// - Ok if refreshing db indices succeeded;
// - Err if it failed, in which case the Alert call will be made.</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="M_Orx_Fun_Result_Res_ErrorMessage.htm">ErrorMessage</a></td><td>
            Returns Some(error-message) if IsErr; None&lt;string&gt;() if IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var result = Err("failed to connect");
Assert(result.ErrorMessage() == Some("failed to connect"));</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_FlatMap.htm">FlatMap(Func<span id="LSTAEACDB6F_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTAEACDB6F_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res TryLogCompletion() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryLogCompletion);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryLogCompletion());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryLogCompletion()/*Res&lt;Res&gt;*/).Flatten()/*Res*/;</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_FlatMap__1.htm">FlatMap<span id="LSTAEACDB6F_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTAEACDB6F_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTAEACDB6F_7" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_8" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTAEACDB6F_9" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res&lt;int&gt; TryGetCount() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryGetCount);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryGetCount());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryGetCount()/*Res&lt;Res&lt;int&gt;&gt;*/).Flatten()/*Res&lt;int&gt;*/;</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_FlatMapAsync.htm">FlatMapAsync(Func<span id="LSTAEACDB6F_10" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTAEACDB6F_11" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTAEACDB6F_12" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTAEACDB6F_13" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res TryLogCompletion() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryLogCompletion);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryLogCompletion());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryLogCompletion()/*Res&lt;Res&gt;*/).Flatten()/*Res*/;</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_FlatMapAsync__1.htm">FlatMapAsync<span id="LSTAEACDB6F_14" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_15" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTAEACDB6F_16" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Task<span id="LSTAEACDB6F_17" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Res<span id="LSTAEACDB6F_18" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_19" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTAEACDB6F_20" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LSTAEACDB6F_21" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            (async version) 
            Returns the error when IsErr; <span class="parameter">map</span>() when IsOk, flattenning the result.
            This is a shorthand for sequential Map and Flatten calls.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// assume we have two methods that can fail; hence returns a Res:
static Res TryRunRiskyOperation() { .. }
static Res&lt;int&gt; TryGetCount() { .. }

// we want to call both operations; but the second one only if the first one succeeds.
Res result = TryRunRiskyOperation().FlatMap(TryGetCount);
// alternatively:
Res result = TryRunRiskyOperation().FlatMap(() =&gt; TryGetCount());

// this is equivalent to:
Res result = TryRunRiskyOperation().Map(() =&gt; TryGetCount()/*Res&lt;Res&lt;int&gt;&gt;*/).Flatten()/*Res&lt;int&gt;*/;</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="M_Orx_Fun_Result_Res_Map__1.htm">Map<span id="LSTAEACDB6F_22" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_23" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the error when IsErr; Ok(<span class="parameter">map</span>()) when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res ValidateInputs(Inputs inputs) { /*checks*/ }
Output CalcOutput(Inputs inputs) { /*maps inputs to output*/ }

Inputs inputs = GetInputs();
Res&lt;Output&gt; output = ValidateInputs(inputs).Map(() =&gt; CalcOutput(inputs));
// output will be:
// - Err if ValidateInputs returns Err omitting the call to CalcOutput;
// - Ok(CalcOutput(inputs)) if ValidateInputs returns Ok.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_MapAsync__1.htm">MapAsync<span id="LSTAEACDB6F_24" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_25" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            (async version) 
            Returns the error when IsErr; Ok(<span class="parameter">map</span>()) when IsOk.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res ValidateInputs(Inputs inputs) { /*checks*/ }
Output CalcOutput(Inputs inputs) { /*maps inputs to output*/ }

Inputs inputs = GetInputs();
Res&lt;Output&gt; output = ValidateInputs(inputs).Map(() =&gt; CalcOutput(inputs));
// output will be:
// - Err if ValidateInputs returns Err omitting the call to CalcOutput;
// - Ok(CalcOutput(inputs)) if ValidateInputs returns Ok.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_Match__1.htm">Match<span id="LSTAEACDB6F_26" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_27" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTAEACDB6F_28" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_29" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, Func<span id="LSTAEACDB6F_30" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LSTAEACDB6F_31" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Maps into <span class="parameter">whenOk</span>() lazily whenever IsOk; and into <span class="parameter">whenErr</span>(errorMessage) otherwise.
            Similar to <a href="M_Orx_Fun_Result_Res_Match__1_1.htm">Match<span id="LSTAEACDB6F_32" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_33" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(TOut, Func<span id="LSTAEACDB6F_34" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LSTAEACDB6F_35" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> except that whenOk is lazy and evaluated only when IsOk.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_Res_Match__1_1.htm">Match<span id="LSTAEACDB6F_36" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_37" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(TOut, Func<span id="LSTAEACDB6F_38" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LSTAEACDB6F_39" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Maps into <span class="parameter">whenOk</span> whenever IsOk; and into <span class="parameter">whenErr</span>(errorMessage) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser(..);
string greetingMessage = user.Match("Welcome", err =&gt; $"Error getting the user: {err}");</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_MatchAsync__1.htm">MatchAsync<span id="LSTAEACDB6F_40" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_41" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            (async version) 
            Maps into <span class="parameter">whenOk</span>() lazily whenever IsOk; and into <span class="parameter">whenErr</span>(errorMessage) otherwise.
            Similar to <a href="M_Orx_Fun_Result_Res_Match__1_1.htm">Match<span id="LSTAEACDB6F_42" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_43" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(TOut, Func<span id="LSTAEACDB6F_44" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, TOut<span id="LSTAEACDB6F_45" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a> except that whenOk is lazy and evaluated only when IsOk.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_Res_MatchDo.htm">MatchDo</a></td><td>
            Executes <span class="parameter">whenOk</span>() whenever IsOk; and <span class="parameter">whenErr</span>(errorMessage) otherwise.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Res&lt;User&gt; user = TryGetUser(..);
user.MatchDo
(
    whenOk: () =&gt; Log.Info("New user login"),
    whenErr: err =&gt; Log.Error($"Failed login. {err}")
);</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_OkIf.htm">OkIf(Boolean, String)</a></td><td>
            Returns back the Err if this is Err.
            Otherwise, returns Ok if <span class="parameter">okCondition</span> holds; Err if it does not hold.
            Especially useful in fluent input validation.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; Login(string username, string passwordHash)
{
    return OkIf(!string.IsNullOrEmpty(username))    // validate username
        .OkIf(!string.IsNullOrEmpty(passwordHash))  // validate password-hash
        .OkIf(userRepo.ContainsKey(username))       // further validate user
        .Map(() =&gt; GetUser(username, password));    // finally map into actual result;
                                                    // any Err in validation steps will directly be mapped to Err, avoiding GetUser call.
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_OkIf_1.htm">OkIf(Func<span id="LSTAEACDB6F_46" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Boolean<span id="LSTAEACDB6F_47" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td><p>Lazy counterpart of <a href="M_Orx_Fun_Result_Res_OkIf.htm">OkIf(Boolean, String)</a> where condition is evaluated only if this is Ok.</p>
            
            Returns back the Err if this is Err.
            Otherwise, returns Ok if <span class="parameter">lazyOkCondition</span> holds; Err if it does not hold.
            Especially useful in fluent input validation.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res&lt;User&gt; Login(string username, string passwordHash)
{
    return OkIf(!string.IsNullOrEmpty(username))    // validate username
        .OkIf(!string.IsNullOrEmpty(passwordHash))  // validate password-hash
        .OkIf(() =&gt; userRepo.ContainsKey(username)) // further validate user; assume this is an expensive call, so we prefer the lazy variant
        .Map(() =&gt; GetUser(username, password));    // finally map into actual result;
                                                    // any Err in validation steps will directly be mapped to Err, avoiding GetUser call.
}</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_Pure.htm">Pure</a></td><td>
            Simply returns Ok function: () =&gt; Ok().
            Useful for composing functions of Res type.
            </td></tr><tr><td><a href="M_Orx_Fun_Result_Res_ThrowIfErr.htm">ThrowIfErr<span id="LSTAEACDB6F_48" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Returns the result back when <a href="P_Orx_Fun_Result_Res_IsOk.htm">IsOk</a>; throws NullReferenceException when <a href="P_Orx_Fun_Result_Res_IsErr.htm">IsErr</a>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res MakeApiCall() {
    // method that makes an api call.
    // might fail; hence, returns a Res rather than void.
}
var result = MakeApiCall().ThrowIfErr();
// result will be:
// - Ok() if MakeApiCall succeeds and returns Ok;
// - the application will throw a NullReferenceException otherwise.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_ThrowIfErr__1.htm">ThrowIfErr<span id="LSTAEACDB6F_49" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>E<span id="LSTAEACDB6F_50" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>(Func<span id="LSTAEACDB6F_51" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>String, E<span id="LSTAEACDB6F_52" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>)</a></td><td>
            Returns the result back when <a href="P_Orx_Fun_Result_Res_IsOk.htm">IsOk</a>; throws an exception of <span class="parameter">E</span> when <a href="P_Orx_Fun_Result_Res_IsErr.htm">IsErr</a>.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res MakeApiCall() {
    // method that makes an api call.
    // might fail; hence, returns a Res rather than void.
}
var result = MakeApiCall().ThrowIfErr&lt;HttpRequestException&gt;(err =&gt; new(err));
// result will be:
// - Ok() if MakeApiCall succeeds and returns Ok;
// - the application will throw HttpRequestException created by the provided delegate otherwise.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_ToErrOf__1.htm">ToErrOf<span id="LSTAEACDB6F_53" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_54" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Converts the result to Err&lt;TOut&gt; regardless of state of this result:
            <ul><li>The error message will be carried on when this is of Err variant,</li><li>A generic error message will be created otherwise.</li></ul></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_ToString.htm">ToString</a></td><td>
            String representation.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ValueType<span id="LSTAEACDB6F_55" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>ToString<span id="LSTAEACDB6F_56" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="M_Orx_Fun_Result_Res_Try.htm">Try</a></td><td>
            When IsOk executes <span class="parameter">action</span>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res TryLogin() { .. }
static void ClearSessionHistory() { /*risky function, might throw!*/ }

var result = TryLogin().Try(ClearSessionHistory);
// the result will be:
// - Err if TryLogin returns Err, in which case ClearSessionHistory is never called;
// - Ok if TryLogin returns Ok; and ClearSessionHistory call succeeds without an exception;
// - Err if TryLogin returns Ok, but ClearSessionHistory throws an exception.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_TryAsync.htm">TryAsync</a></td><td>
            (async version) 
            When IsOk executes <span class="parameter">action</span>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res TryLogin() { .. }
static void ClearSessionHistory() { /*risky function, might throw!*/ }

var result = TryLogin().Try(ClearSessionHistory);
// the result will be:
// - Err if TryLogin returns Err, in which case ClearSessionHistory is never called;
// - Ok if TryLogin returns Ok; and ClearSessionHistory call succeeds without an exception;
// - Err if TryLogin returns Ok, but ClearSessionHistory throws an exception.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_TryMap__1.htm">TryMap<span id="LSTAEACDB6F_57" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_58" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<span class="parameter">map</span>()) in a try-catch block and returns the Err if it throws.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateUser(User user) { /*returns Ok if valid; Err o/w*/ }
static Res&lt;Secret&gt; TryGetSecrets(User user) { /*returns Ok(secrets) if succeds; Err if fails to get secrets*/ }

User user = GetUser(..);
var secrets = ValidateUser(user).TryMap(() =&gt; TryGetSecrets(user));
// TryGetSecrets will be called only if ValidateUser call returns Ok;
// secrets will be Ok of the grabbed secrets if both ValidateUser and TryGetSecrets return Ok.</code></pre></div></div></td></tr><tr><td><a href="M_Orx_Fun_Result_Res_TryMapAsync__1.htm">TryMapAsync<span id="LSTAEACDB6F_59" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>TOut<span id="LSTAEACDB6F_60" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span></a></td><td>
            (async version) 
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<span class="parameter">map</span>()) in a try-catch block and returns the Err if it throws.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">static Res ValidateUser(User user) { /*returns Ok if valid; Err o/w*/ }
static Res&lt;Secret&gt; TryGetSecrets(User user) { /*returns Ok(secrets) if succeds; Err if fails to get secrets*/ }

User user = GetUser(..);
var secrets = ValidateUser(user).TryMap(() =&gt; TryGetSecrets(user));
// TryGetSecrets will be called only if ValidateUser call returns Ok;
// secrets will be Ok of the grabbed secrets if both ValidateUser and TryGetSecrets return Ok.</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="T_Orx_Fun_Result_Res.htm">Res Structure</a></div><div><a href="N_Orx_Fun_Result.htm">Orx.Fun.Result Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-fun-result<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.Fun.Result%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>